<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~     Chatter - my Programming III. homework assignment
  ~     Copyright (C) 2018  Botond János Kovács
  ~
  ~     This program is free software: you can redistribute it and/or modify
  ~     it under the terms of the GNU General Public License as published by
  ~     the Free Software Foundation, either version 3 of the License, or
  ~     (at your option) any later version.
  ~
  ~     This program is distributed in the hope that it will be useful,
  ~     but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~     GNU General Public License for more details.
  ~
  ~     You should have received a copy of the GNU General Public License
  ~     along with this program.  If not, see <https://www.gnu.org/licenses/>.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>prog3</artifactId>
        <groupId>me.bokov</groupId>
        <version>0.0.1.Snapshot</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <groupId>me.bokov.prog3</groupId>
    <artifactId>prog3-homework-command-api</artifactId>

    <packaging>jar</packaging>

    <build>

        <plugins>

            <plugin>

                <artifactId>maven-compiler-plugin</artifactId>
                <version>${version.maven.compiler}</version>

                <configuration>

                    <source>${java.source}</source>
                    <target>${java.target}</target>
                    <encoding>${java.encoding}</encoding>

                </configuration>

            </plugin>

            <plugin>

                <artifactId>maven-jar-plugin</artifactId>
                <version>${version.maven.jar}</version>

            </plugin>

            <!-- Double plugin declaration, because prepare-agent must run before test in surefire,
            but report must run after test in surefire. The goal report is required, because that
            produces the jacoco.xml file which can be used by CodeClimate -->

            <plugin>

                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${version.plugin.jacoco}</version>

                <executions>

                    <execution>

                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                        <id>prepare-agent</id>
                        <phase>test-compile</phase>

                    </execution>

                </executions>

            </plugin>

            <plugin>

                <artifactId>maven-surefire-plugin</artifactId>
                <version>${version.maven.surefire}</version>

            </plugin>

            <plugin>

                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${version.plugin.jacoco}</version>

                <executions>

                    <execution>

                        <id>make-report</id>
                        <phase>test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>

                    </execution>

                </executions>

            </plugin>

        </plugins>

    </build>

    <dependencies>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-collections4</artifactId>
            <version>${version.commons-collections4}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>${version.commons-lang3}</version>
        </dependency>

        <dependency>
            <groupId>org.glassfish</groupId>
            <artifactId>javax.json</artifactId>
            <version>${version.javax-json}</version>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${version.test.junit}</version>
            <scope>test</scope>
        </dependency>

    </dependencies>

</project>